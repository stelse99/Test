############################
# DOCKER COMMANDS
############################
docker version
docker search nginx
docker images
docker pull nginx
   /var/lib/docker/overlay2
docker image ls
docker run --name web -d -p 80:80 nginx
    -d: background 모드
docker stop web
docker rm web
docker rm image nginx
    Error: No such container: image
docker rmi nginx

docker inspect webserver
docker inspect --format '{{.NetworksSettings.IPAddress}}'  webserver
$alias cip="docker inspect --format '{{.NetworksSettings.IPAddress}}'"
$cip webserver
$alias

curl 10.100.0.105
docker logs webserver

docker ps -a
docker stop webserer
docker start webserver
docker rm webserver   -- running 중인 컨테이너는 삭제 불가함.
docker rm -f webserver -- 강제로 kill 한다.

ls cpu
htop

lsblk

docker stats
cAdvisor  -- 컨테이너 모니터링 툴 설치
https://github.com/google/cadvisor

alis crm='docker rm -f $(docker ps -aq)

docker iptables --help
docker network --help

https://docs.docker.com/samples/wordpress/
https://docs.docker.com/language/java/build-images/




############################
## 무엇을 컨테이너로 만드는 것인가?
############################
1) 개발한 프로그램 과 실행환경을 모두 컨테이너로 만든다.
2) MSA(Micro Service Architecture) 환경의 Ployglot 애플리케이션 운영.
즉, 각각의 Application Service 에 맞춰 Container 를 만들어 낸다.


############################
## 컨테이너는 어떻게 만드는가?
############################
Dockerfile 을 이용하여 컨테이너를 Build 한다.
Dockerfile:
    컨테이너를 만들수 있도록 도와주는 명령어의 집합이다.
    쉽고, 간단, 명확한 구문을 가진 text file 로 Top-Down 해석.
    컨테이너 이미지를 생성 할수 있는 고유의 지시어 를 가짐.
    대소문자 구분 하지 않으나 가독성을 위해 사용함.
    $ mkdir build
    $ cd build
    $ vi dockerfile
    FROM node:12
    COPY hello.js /
    CMD  ["node","hello.js"]

############################
## 컨테이너 Build
############################
$ docker build -t imagename:tag .
     -t: tag
$ docker build -t hellojs:latest .

############################
## 컨테이너 Deploy
############################
$docker login
##$docker tag webserver:v1 stelse99/webserver:v1
$docker tag hellojs:latest stelse99/hellojs:latest
$docker push stelse99/hellojs:latest
$docker pull stelse99/app


############################
# TimeZone 설정.
############################
docker run -v /etc/timezone:/etc/timezone:ro   --Windows, MacOS
docker run -e TZ=Asia/Seoul


############################
# Springboot && MySql 연동 구현.
############################
docker run -dp 3336:3306 --name mysqldb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mydb mysql
docker run -dp 3336:3306 --name mysqldb --env-file envmysql -v "/home/desktp/db":/var/lib/mysql mysql
docker network create spring-net
docker network connect spring-net mysqldb
docker network ls
docker network inspect spring-net
docker run -dp 9090:8080 --name app --net spring-net -e MYSQL_HOST=mysqldb -e MYSQL_USER=root -e MYSQL_PASSWORD=root -e MYSQL_PORT=3306 stelse99/app
docker run -dp 9090:8080 --name app --net spring-net --env-file envapp stelse99/app
docker logs app



############################
# Private Repository 구축방법.
############################
# Registry 컨테이너를 이용해 Private 컨테이너 운영
    $docker run -d -p 5000:80 --restart always --name registry registry:2

# image repository
    localhost:5000/ubuntu:18.04
    docker.example.com:5000/ubuntu:18.04



